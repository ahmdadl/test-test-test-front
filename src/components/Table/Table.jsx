import * as React from 'react';
import { DataGrid, GridToolbar } from '@mui/x-data-grid';
import { Link, useNavigate } from 'react-router-dom';
import styles from './table.module.scss';
import { Button, IconButton, Radio } from '@mui/material';
import {
    RadioButtonCheckedRounded,
    Delete,
    Edit,
    QuestionAnswer,
    QuestionMark,
    List,
    Check,
    Close,
} from '@mui/icons-material';
import Modal from '../Modal/Modal';
import DeleteModalContent from '../Modal/DeleteModalContent/DeleteModalContent';
import axios from '../../axios';
import { toast } from 'react-toastify';

export default function DataTable(props) {
    const navigate = useNavigate();
    const [rows, setRows] = React.useState([]);
    const [loading, setLoading] = React.useState(false);
    const [selectedRowId, setSelectedRowId] = React.useState();
    const [showModal, setShowModal] = React.useState(false);
    const [activeQuestion, setActiveQuestion] = React.useState();

    const closeModal = () => setShowModal(false);
    const openModal = () => setShowModal(true);

    const onDeleteQuestion = (id) => {
        openModal();
        setActiveQuestion(id);
    };

    const onTakeExam = (id) => {
        navigate(`/quizzes/${id}/exam`);
    };

    const onShowExams = (id) => {
        navigate(`/quizzes/${id}/exams-list`);
    };

    const onConfirmDelete = async () => {
        closeModal();
        try {
            const res = await axios.delete(`/question/${activeQuestion}`);
            console.log(res.data);
            toast.success('Question deleted successfully');
            await fetchQuestions();
        } catch (error) {
            console.log(error);
        }
    };

    const renderColorStatus = (status) => {
        let color = { backgroundColor: 'black' };
        if (status === 'g') {
            color = { backgroundColor: 'green' };
        } else if (status === 'y') {
            color = { backgroundColor: 'yellow' };
        } else if (status === 'r') {
            color = { backgroundColor: 'red' };
        }
        return color;
    };

    const columns = [
        {
            field: 'col0',
            headerName: '',
            width: 60,
            renderCell: (params) => (
                <Radio
                    checked={params.id == selectedRowId}
                    value={params.id}
                    onChange={(e) => {
                        console.log(e.target.value);
                        setSelectedRowId(e.target.value);
                    }}
                />
            ),
        },
        {
            field: 'name',
            headerName: 'Title',
            width: 200,
            renderCell: (params) => {
                return <Link to={`/show/${params.id}`}>{params.row.name}</Link>;
            },
        },
        {
            field: 'domain',
            headerName: 'Domain',
            width: 200,
        },
        {
            field: 'subDomain',
            headerName: 'Sub Domain',
            width: 200,
        },
        {
            field: 'isAutoGenerated',
            headerName: 'Auto Generated',
            width: 80,
            renderCell: (params) => {
                return params.row.isAutoGenerated ? (
                    <Check color='success' />
                ) : (
                    <Close color='error' />
                );
            },
        },
        {
            field: 'quizData',
            headerName: 'Quiz Schedule',
            width: 150,
        },
        {
            field: 'gradeOfQuiz',
            headerName: 'Total grade',
            width: 140,
        },
        {
            field: 'successGrade',
            headerName: 'The pass score',
            width: 150,
        },
        {
            field: 'durationOfQuiz',
            headerName: 'Quiz Duration',
            width: 100,
        },
        {
            field: 'complexity',
            headerName: 'Complexity',
            width: 100,
        },
        {
            field: 'actions',
            headerName: 'Actions',
            width: 100,
            renderCell: (params) => {
                return (
                    <>
                        <IconButton
                            aria-label='takeExam'
                            color='info'
                            onClick={() => onTakeExam(params.id)}
                        >
                            <QuestionMark />
                        </IconButton>
                        <IconButton
                            style={{ marginLeft: '.5rem' }}
                            aria-label='takeExam'
                            color='info'
                            onClick={() => onShowExams(params.id)}
                        >
                            <List />
                        </IconButton>
                    </>
                );
            },
        },
    ];

    const fetchQuestions = React.useCallback(async () => {
        setLoading(true);
        const res = await axios.get(`/interactive-quizs`).catch((err) => {
            toast.error('an error occurred');
            return;
        });

        if (!res || !res.data) return;

        const data = res.data;
        if (!!data.docs.length) {
            setRows(
                data.docs.map((item) => ({
                    id: item._id,
                    name: item.quizName,
                    domain: item.domainName,
                    subDomain: item.subDomainName,
                    quizData: item.quizSchedule,
                    gradeOfQuiz: item.totalGrade,
                    successGrade: item.ThePassScore,
                    durationOfQuiz: item.quizDuration,
                    complexity: item.complexity,
                    isAutoGenerated: item.isAutoGenerated,
                }))
            );
        }
        setLoading(false);
    }, []);

    React.useEffect(() => {
        fetchQuestions();
    }, [fetchQuestions]);

    const onClickAddQuiz = () => {
        navigate('/add-quiz');
    };

    const onClickOpenStudents = () => navigate('/students');

    const onClickEditQuestion = () => {
        navigate(`/editQuiz/${selectedRowId}`);
    };

    return (
        <>
            <Modal show={showModal} handleClose={closeModal}>
                <DeleteModalContent
                    handleClose={closeModal}
                    onDelete={onConfirmDelete}
                />
            </Modal>
            <div className={styles.table}>
                <div className={styles.actions}>
                    <Button variant='contained' onClick={onClickAddQuiz}>
                        Add Quiz
                    </Button>
                    <Button
                        variant='contained'
                        color='info'
                        onClick={onClickOpenStudents}
                    >
                        Students
                    </Button>
                    {/* <Button
                        variant='contained'
                        color='warning'
                        onClick={() => navigate('/topics')}
                    >
                        Topics
                    </Button> */}
                    <Button variant='contained' onClick={onClickEditQuestion}>
                        Edit
                    </Button>
                </div>
                <DataGrid
                    loading={loading}
                    rows={rows}
                    columns={columns}
                    initialState={{
                        pagination: {
                            paginationModel: { page: 0, pageSize: 5 },
                        },
                    }}
                    pageSizeOptions={[5, 10]}
                    baseCheckbox={RadioButtonCheckedRounded}
                    slots={{ toolbar: GridToolbar }}
                />
            </div>
        </>
    );
}
